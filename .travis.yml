sudo: required
dist: trusty
language: cpp
script: cmake

matrix:
    include:
        # OSX
        - env: CPP11=off MAC_OSX=true
          os: osx
          osx_image: xcode6.4
          compiler: clang

        - env: CPP11=on MAC_OSX=true
          os: osx
          osx_image: xcode6.4
          compiler: clang

        - env: CPP11=off MAC_OSX=true
          os: osx
          osx_image: xcode7.3
          compiler: clang

        - env: CPP11=on MAC_OSX=true
          os: osx
          osx_image: xcode7.3
          compiler: clang

        - env: CPP11=off MAC_OSX=true
          os: osx
          osx_image: xcode8
          compiler: clang

        - env: CPP11=on MAC_OSX=true
          os: osx
          osx_image: xcode8
          compiler: clang

        - env: CPP11=off MAC_OSX=true
          os: osx
          osx_image: xcode8.1
          compiler: clang

        - env: CPP11=on MAC_OSX=true
          os: osx
          osx_image: xcode8.1
          compiler: clang

        - env: CPP11=off MAC_OSX=true COVERAGE=on
          os: osx
          osx_image: xcode8.2
          compiler: clang

        - env: CPP11=on MAC_OSX=true
          os: osx
          osx_image: xcode8.2
          compiler: clang

        # Gcc
        - env: GCC_VERSION=4.8 CPP11=off
          os: linux
          compiler: gcc-4.8
          addons: &gcc48
            apt:
              packages:
                - g++-4.8
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=4.8 CPP11=on
          os: linux
          compiler: gcc-4.8
          addons: &gcc48
            apt:
              packages:
                - g++-4.8
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=4.9 CPP11=off
          os: linux
          compiler: gcc-4.9
          addons: &gcc49
            apt:
              packages:
                - g++-4.9
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=4.9 CPP11=on
          os: linux
          compiler: gcc-4.9
          addons: &gcc49
            apt:
              packages:
                - g++-4.9
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=5 CPP11=off
          os: linux
          compiler: gcc-5
          addons: &gcc5
            apt:
              packages:
                - g++-5
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=5 CPP11=on
          os: linux
          compiler: gcc-5
          addons: &gcc5
            apt:
              packages:
                - g++-5
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=6 CPP11=off
          os: linux
          compiler: gcc-6
          addons: &gcc6
            apt:
              packages:
                - g++-6
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

        - env: GCC_VERSION=6 CPP11=on
          os: linux
          compiler: gcc-6
          addons: &gcc6
            apt:
              packages:
                - g++-6
                - valgrind
              sources:
                - ubuntu-toolchain-r-test

install:
    - export CHECKOUT_PATH=`pwd`;
    - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
    - if [ -n "$CLANG_VERSION" ]; then export CXXFLAGS="${CXXFLAGS} -stdlib=libstdc++" CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
    # - if [[ "$CLANG_VERSION" == "3.4" ]]; then export CXX="/usr/local/clang-3.4/bin/clang++" CC="/usr/local/clang-3.4/bin/clang"; fi
    # Setup deps directory
    - export DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
    - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
    - mkdir usr
    - export PATH=${DEPS_DIR}/usr/bin:${PATH}
    # Install cmake
    - |
      if [[ "$MAC_OSX" == "true" ]]; then
        export CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.0-Darwin-x86_64.tar.gz"
        travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=3 -xz -C usr
        brew install lcov
      else
        export CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.0-Linux-x86_64.tar.gz"
        travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C usr
      fi
    - echo $PATH
    - travis_retry wget --no-check-certificate --quiet https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.bz2
    - tar xjf boost_1_64_0.tar.bz2
    # Show compiler info
    - $CXX --version
    - which $CXX
    - $CC --version
    - which $CC
    - which cmake
    - cmake --version
    # Add warnings
    - export CXXFLAGS="${CXXFLAGS} -Wall"

script:
    - cd $CHECKOUT_PATH
    - export LANGVERSIONS="14"
    - if [[ "$CPP11" == "on" ]]; then export LANGVERSIONS="${LANGVERSIONS} 11"; fi
    - |
      for build_type in debug release; do
        for lang_ver in $LANGVERSIONS; do
          build_dir="build-$build_type-cxx-$lang_ver"
          mkdir $build_dir
          cd $build_dir
          cmake -DCXX_STD=${lang_ver} -DBOOST_ROOT=${DEPS_DIR}/boost_1_64_0 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
          VERBOSE=1 make -j4 && CTEST_OUTPUT_ON_FAILURE=1 CTEST_PARALLEL_LEVEL=4 make check
          if [ $? -ne 0 ]
          then
            exit 1
          fi
          cd ..
          rm -rf $build_dir
        done
      done
      if [[ "$COVERAGE" == "on" ]]; then
          build_dir="build-$build_type-cxx-$lang_ver-coverage"
          mkdir $build_dir
          cd $build_dir
          cmake -DCXX_STD=${lang_ver} -DBOOST_ROOT=${DEPS_DIR}/boost_1_64_0 -DBUILD_COVERAGE=true ..
          sudo ln -s /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/llvm-cov /usr/local/bin/llvm-cov
          VERBOSE=1 make -j4 && CTEST_OUTPUT_ON_FAILURE=1 CTEST_PARALLEL_LEVEL=4 make coverage
          if [ $? -ne 0 ]
          then
            exit 1
          fi
          bash <(curl -s https://codecov.io/bash) -f test/lcov.info || echo "Codecov did not collect coverage reports"
          cd ..
          rm -rf $build_dir
      fi
