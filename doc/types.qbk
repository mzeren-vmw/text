[section Boost.Text String Types]

[heading The `text_view` Type]

_tv_ is type at the center of _Text_.  It is used everywhere you would have
used `char const *` before C++17, and everywhere you would use
`std::string_view` in C++17 and later.

Analogouly to `std::string_view`, it defines implicit conversions from `char
const *` and _t_, so it can be used in interfaces that accept either.

_tv_ is fully _ce_ in everything it does, if you have the compiler support
(C++14 _ce_).  You can write very extensive compile-time operations using _tv_
and the _Text_ algorithms.

[text_view_lotsa_constexpr]

_tv_ is a nearly immutable type; there are no mutating member functions,
besides assignment and `swap()`.  It is small (the size of two pointers on
most modern architectures) and cheap to copy.

_tv_ is also guaranteed to be UTF-8 encoded, as long as it is constructed from
a chain of slice operations that originates from a UTF-8 encoded _tv_.  That
is, it is not possible to break the UTF-8 encoding unintentionally.

Due to its reliance on UTF-8 encoding, it has no need to support multiple
character types.  Its underlying sequence is always a sequence of `char`.  It
is not a template.

It has a signed size and index type, and since contiguous unowned sequences of
`char` are unlikely to be huge, its size/index type is `int`.  It is still
possible to deal with very large unowned sequences of `char` using _r_, though
node allocations are required when using that.

It is also slice-able.  There are two slice operations, each using an
overloaded call operator.  The first one is very much like the Python slicing
index syntax.  Positive and negative indices are allowed.  Negative indices
count from the end -- they are converted to positive indices by adding
`size()`.

[binary_slice_examples]

The second slice operation takes a single index value, which may be positive
or negative.  A positive value `x` create a prefix substring of length `x`,
and a negative one creates a suffix substring of length `-x`.

[unary_slice_examples]

[note _tv_ throws an exception whenever it is constructed from a string whose
ends are not properly UTF-8 encoded (unless you opt out by using
`boost::text::utf8::unchecked`).  This includes the construction of _tvs_ via
the slicing operations.]

Of course, there is a user-defined literal for _tv_:

[text_view_literal]

Finally, there is an `explicit` conversion from any value of a type that
models _Char_rng_.  _Char_rng_ is any contiguous sequence of `char` that
provides `char const *` pointer access to its `char`s.  This give use
conversions from `std::string` and other types that _tv_ does not explicitly
know about.


[heading The `text` Type]

_t_ is a contiguous, heap-allocated sequence of `char`.  _t_ is also strongly
exception-safe.  Its purpose is to be a better `std::string`.

Like _tv_, it is guaranteed to be UTF-8 encoded, with the same gurantees when
constructing and slicing.  Its character type is `char` and its size/index
type is `int`, for the same reasons given for _tv_.  It is also slice-able in
the same way that _tv_ is.

_t_ has its own user-defined literals:

[text_literal]

Unlike _tv_ though, _t_ is mutable.  _t_ also checks that its mutating
operations do not break UTF-8 encoding.  Mostly.  Why not always?  This is
C++, so we say things like "You always -- always and without fail -- want to
make sure your strings are UTF-8 encoded (except when you don't)."

So, there is a safe interface, that always checks the encoding on mutations,
and an unsafe one, that does not (or sometimes partially does).  Let's look at
the mutating operations.

These are not very interesting with respect to encoding, because no checks are
necessary; these are the purely safe mutations:

* `reserve()`
* `shrink_to_fit()`
* `clear()`

These are impossible to check, because they give the user a pointer into the
guts of _t_, after which _t_ is ignorant of the mutations performed; they are
purely unsafe mutations:

* `operator[]()`
* `begin()` (non-`const`)
* `end()` (non-`const`)

These require checking to ensure UTF-8 encoding:

* `insert()`
* `erase()`
* `replace()`

Each of `insert()`, `erase()`, and `replace()` has multiple overloads.  Let's
look at the ones for `insert()`:

    text & insert(int at, text_view tv);
    text & insert(int at, repeated_text_view rtv);
    template<typename CharRange> text & insert(int at, CharRange const & rng);
    template<typename Iter> text & insert(int at, Iter first, Iter last);
    template<typename Iter> text & insert(iterator at, Iter first, Iter last);

The first two insert sequences that are unchecked, since they are already
contained in _Text_ types.  The _Char_rng_ overload constructs a _tv_ from the
inserted object, and so the normal _tv_ checking is done.

For the last two, it becomes impossible to check the encoding at the ends
up-front, since the iterators might be input iterators, which are
iterate-once.  For the same reason, if we wait to do the encoding check, and
copy the contents of `[first, last)` into the _t_ first, if we find out that
they are not properly encoded, we would lose the already-read data, since we
can't go back and re-iterate over the sequence.

For these reasons, and because we need a way for users to intentionally break
encoding when they really need to, the iterator-using interfaces are not
checked for UTF-8 encoding at all:

[char_rng_vs_iters_insertion]

Insertions can insert a sequence with broken encoding, or insert at a location
that breaks encoding.  What about checking the insertion point for encoding
breakage?

A similar rule applies -- we check for encoding breakage when the insertion
point is given as an index, and do not check when it is given as an iterator.

Notice how two out of the three the always-unsafe mutations are `begin()` and
`end()`.  Also, we don't check encoding breakage at the insertion point if the
insertion point `at` is given as an iterator, and we don't check the inserted
sequence if it is given as a pair of iterators.  That leads us to this
guideline:

[note Whenever you see an iterator in the interface to a _Text_ type, that
signals that there is no UTF-8 encoding guarantee for that part of the
interface (insertion point or inserted sequence, in the `insert()` case.]

It's not necessary to examine all the `erase()` and `replace()` overloads,
because they follow the same pattern -- use of iterators turns off encoding
checks.


[heading The `repeated_text_view` Type]

One of the things that differs between `std::string` and _t_ is that _t_ is
missing all those overloads (including constructors) that take a number of
characters to repeat.  For example, _t_ has no function for inserting a single
character N times.  Part of the reason for this, is that inserting a single
character no longer works, since _Text_ types use a variable-length encoding,
UTF-8.  Instead of having all those overloads, especially since they don't
really fit with UTF-8, and using a heap-allocating type like _t_ to represent
repeated characters, _Text_ introduces a new non-allocating type for this,
_rtv_.

_rtv_ has semantics and an interface much like _tv_: it is near-immutable; it
uses a signed size/index type (though a typically-larger one,
`std::ptrdiff_t`); it uses `char` as its character type; and it is slice-able
in the same way.

With _rtv_ in hand, this code which allocates:

    std::cout << std::string(indent, ' ');

becomes this code, which does not:

    std::cout << boost::text::repeated_text_view(" ", indent);


[heading The `rope` Type]

In general, a _Rope_ is a heavyweight string; whereas a string is a simple
array of contiguous storage, a _Rope_ is much more complicated and is
typically a tree whose leaves are contiguous strings.

The user's view of _Text_'s _r_ is that it is a UTF-8 encoded string that is
inexpensive to insert into at any point -- even the middle or front -- no
matter how large it is.  In addition, substrings within the _r_ have
copy-on-write semantics.  This means that often a copy of a very large _r_ is
nearly free, and that a mutated a copy of a _r_ often shares much of its data
with the _r_ from which it was copied.

_r_'s implementation uses a tree structure similar to a B+ tree, and each
subtree is copy-on-write.  The tree consists of interior nodes that contain
structural information, and leaf nodes which contain the data.  _r_ only
contains a single pointer to a root node.  Here is one of the simplest
nonempty _rs_ you can have:

[$../../doc/rope_text_leaf.svg]

This _r_ is just a single leaf node, containing the super-useful string
`"text"`.  In this case, the leaf was a _t_ node, labeled here with `t`.
There can also be leaf nodes for _tvs_ and _rtvs_, labeled in these diagrams
with `tv` and `rtv`, respectively.  The final leaf node type is a
reference-to-_t_ leaf, labeled as `ref`.  More on that in a bit.

If we copy the _r_ above, we get something like this:

[$../../doc/rope_text_leaf_extra_ref.svg]

No copying was done, nor allocations performed.  Copying an entire tree only
requires copying a pointer and incrementing a reference count.  The string in
this _t_ leaf is only four characters, but let's suppose it was megabytes
instead.  Inserting even a small sequence near the beginning of the string
would be costly, since we'd have to copy all the characters after the
insertion point.  And since the _t_ leaf may be shared, we would have to copy
everything /before/ the insertion, too!  For large _t_ leaves, insertions into
them result in something like this:

[$../../doc/rope_text_refs_after_insert.svg]

[note This is *not* what actually happens to small _t_ leaves with a reference
count of 1!  Those are mutated in place.]

Here, we see that we've made two new reference nodes, each of which refers to
part of the original _t_, and we've put the inserted string in between,
forming `"text text"`, which everyone knows is the *best* string.

And now we see our first interior node.  Each interior node has a key and a
pointer for each child, and a fixed maximum number of children.  Each key `Ki`
is the cumulative size of all children in the range `[0, i]`.

To make the images smaller, each interior node in these diagrams has a maximum
of four children (the actually number is an implementation detail, but it's a
lot higher).

Now let's take a look at a more complicated _r_:

[$../../doc/rope_tree_structure.svg]

In this tree, we have three interior nodes: the root and its two children.  We
also have at least one of each type of leaf node.

Copying even this _r_ is very cheap, requiring only copying a pointer and
incrementing a reference count:

[$../../doc/rope_copy_add_ref.svg]

Let's say we wanted to erase part of this _r_.  We'll erase a substring that
matches a whole leaf exactly, to keep things simpler:

[$../../doc/rope_erase.svg]

Simple, right?  In this case, we did the erasure by creating a copy of each
node on the path from the root to the erased leaf, and just referring to all
the other nodes that did not change.  Again, most of the string data and and
even interior nodes are shared among the three ropes in the diagram.  This
same principle applies to `insert()`, `erase()`, and `replace()`.

[note We don't make new nodes every time we need to do an insert, erase, or
other mutation.  If the reference counts on the root-to-leaf path are all `1`,
we will mutate the tree in place.]

Besides the segmented nature of _r_, there are some other properties you need
to know about.  A _r_ as a whole is copy-on-write; it is also therefore
thread-safe for reading and writing; it is not null-terminated; it uses a
signed size/index type (`std::ptrdiff_t`); it uses `char` as its character
type; and it is slice-able.

Insertions, erasures, and indexing each happen in `O(log_B(N))` time, where B
is the branching factor (maximum number of children per interior node).  As
mentioned before, B is an implementation detail, and thus subject to change,
but it is unlikely to be less than 16.  That means very little pointer chasing
is required to access an arbitrary element of a _r_, because its tree is very
shallow.

As mentioned previously, mutations to a _r_ are done in-place if the mutations
do not affect nodes that are shared with other _rs_.

If a mutation can be done in place, and the point of mutation is falls within
a _t_ leaf, the _t_ object is directly mutated if: the inserted string fits
within the `capacity()` of the _t_, *or*

* the _t_ object is not too large (there is a maximum size that is an
  implementation detail, but is likely to be hundreds or thousands, not tens
  or tens of thousands), *and*

* the inserted object would cause an allocation if copied (i.e. it is a
  _t_).

Most of _Text_'s interfaces try to use _tv_ or _rv_ parameters where possible,
instead of explicitly creating all the possible _t_, _tv_ `char const *`,
etc. overloads.  You may notice however that _r_ has overloads for its
inserting functions and constructors for _t_, _tv_, _rtv_, and _rv_, when it
seems just _rv_ would do.

These extra overloads allow you to control exactly which kind of leaf node
gets inserted into the _r_ (except the in-place mutation of _ts_ mentioned
above).  If you have a string that is already owned by another entity, and is
guaranteed to outlive the _r_, insert a _tv_ of the string into the _r_,
because it's very efficient.  If you don't know that a string you're inserting
will outlive the _r_, or if you want to add a spot to the _r_ that you intend
to update with subsequent in-place edits, insert a _t_ instead.


[heading The `rope_view` Type]

Just as you can think of a _Rope_ as a heavyweight string, you can think of a
_rv_ is a heavyweight _tv_.  It can bind to a _r_, but also to any of _t_,
_tv_, and _rtv_.

_rv_ has semantics and an interface much like _tv_: it is near-immutable; it
uses a signed size/index type (`std::ptrdiff_t`); it uses `char` as its
character type; and it is slice-able.

A key use of _rv_ is that it can bind to all the other _Text_ string types.
If your code expects to handle only _ts_, `char const *`s, and _tvs_ as
function parameters, use _tv_ in your interfaces.  If you also expect to
handle _rs_ and _rtvs_, use _rv_ in your interfaces instead.


[heading Common Operations]

There are some operations that are common to all the _Text_ type. TODO


[heading Picking the Right String Type]

TODO

[endsect]
