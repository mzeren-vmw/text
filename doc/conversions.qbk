[section UTF-8 Conversions]

[note _Text_'s UTF-8 support is based on the Unicode 9 standard.]

_Text_ provides eight converting iterators:

* `template<typename Iter> struct from_utf16_iterator`
* `template<typename Iter> struct from_utf16_iterator_throwing`
* `template<typename Iter> struct from_utf32_iterator`
* `template<typename Iter> struct from_utf32_iterator_throwing`
* `struct to_utf16_iterator`
* `struct to_utf16_iterator_throwing`
* `struct to_utf32_iterator`
* `struct to_utf32_iterator_throwing`

The ones with `throwing` in the name throw an exception when encoutering an
invalid encoding.

The other ones produce the Unicode replacement character `0xFFFD` when
encoutering an invalid encoding.  These are the ones that _Text_ uses
internally when performing conversions.

The Unicode standard is flexible with respect to where, in an incoming stream,
encoding errors are repored.  However, the standard provides recommendations
for where within a stream, and how frequently within that stream, errors
should be reported.  _Text_'s converting iterators follow the Unicode
recommendations.  See Unicode 9, "Best Practices for Using U+FFFD" and Table
3-8.

The converting iterators are pretty straightforward, but there are some
caveats:

# Since UTF-8 and UTF-16 are multi-character encodings, simply incrementing or
  decrementing the iterator requires reading the underlying sequence in order
  to determine how far to advance within the input sequence.  The iterator
  does not know where the end of the sequence is, so you may need to check
  this if there is doubt about the validity of the encoding.

# Because each of these converting iterators does a substantial amount of work
  in increment and decrement operations, including in some cases caching the
  result of reading several characters of a multi-character encoding,
  post-increment and pot-decrement can be quite a bit more expensive than
  pre-increment and pre-decrement.

[note The `to_utf32_iterator` converting iterator can be used to iterate
across Unicode code points in most of the _Text_ string types.]

[endsect]
